## Generated for all DNS messages.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## is_orig:  True if the message was sent by the originator of the connection.
##
## msg: The parsed DNS message header.
##
## len: The length of the message's raw representation (i.e., the DNS payload).
##
event dns_telemetry_message%(c: connection, is_orig: bool, msg: dns_telemetry_msg, len: count%);

## Generated for DNS requests. For requests with multiple queries, this event
## is raised once for each.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
## query: The queried name.
##
## qtype: The queried resource record type.
##
## qclass: The queried resource record class.
##
event dns_telemetry_request%(c: connection, msg: dns_telemetry_msg, query: string, qtype: count, qclass: count%);

## Generated for DNS replies that reject a query. This event is raised if a DNS
## reply either indicates failure via its status code or does not pass on any
## answers to a query. Note that all of the event's parameters are parsed out of
## the reply; there's no stateful correlation with the query.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
## query: The queried name.
##
## qtype: The queried resource record type.
##
## qclass: The queried resource record class.
##
event dns_telemetry_rejected%(c: connection, msg: dns_telemetry_msg, query: string, qtype: count, qclass: count%);

## Generated for DNS replies with an *ok* status code but no question section.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
## query: The queried name.
##
## qtype: The queried resource record type.
##
## qclass: The queried resource record class.
##
event dns_telemetry_query_reply%(c: connection, msg: dns_telemetry_msg, query: string, qtype: count, qclass: count%);

## Generated for DNS replies of type *EDNS*. For replies with multiple answers,
## an individual event of the corresponding type is raised for each.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
event dns_telemetry_EDNS_addl%(c: connection, msg: dns_telemetry_msg, ans: dns_telemetry_edns_additional%);

## Generated for DNS replies of type *TSIG*. For replies with multiple answers,
## an individual event of the corresponding type is raised for each.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
## ans: The parsed TSIG reply.
##
event dns_telemetry_TSIG_addl%(c: connection, msg: dns_telemetry_msg, ans: dns_tsig_additional%);

## Generated at the end of processing a DNS packet. This event is the last
## ``dns_*`` event that will be raised for a DNS query/reply and signals that
## all resource records have been passed on.
##
## See `Wikipedia <http://en.wikipedia.org/wiki/Domain_Name_System>`__ for more
## information about the DNS protocol. Bro analyzes both UDP and TCP DNS
## sessions.
##
## c: The connection, which may be UDP or TCP depending on the type of the
##    transport-layer session being analyzed.
##
## msg: The parsed DNS message header.
##
event dns_telemetry_end%(c: connection, msg: dns_telemetry_msg%);

## msg: The raw DNS payload.
##
## .. note:: This event is deprecated and superseded by Bro's dynamic protocol
##    detection framework.
event non_dns_telemetry_request%(c: connection, msg: string%);

event dns_telemetry_count%(info:dns_telemetry_counts%);
event dns_telemetry_totals%(info:dns_telemetry_counts%);
event dns_telemetry_anyrd_info%(info:dns_telemetry_anyrd_stats%);
event dns_telemetry_client_info%(info:dns_telemetry_client_stats%);
event dns_telemetry_zone_info%(info:dns_telemetry_zone_stats%);
event dns_telemetry_owner_info%(info:dns_telemetry_owner_stats%);
event dns_telemetry_qname_info%(info:dns_telemetry_qname_stats%);
event dns_telemetry_detail_info%(info:dns_telemetry_detail%);

%%{

extern bool do_zone_stats;
extern bool do_owner_stats;
extern bool do_qname_stats;
extern bool do_anyrd_stats;
extern bool do_client_stats;
extern bool do_counts;
extern bool do_totals;
extern bool do_details;
extern bool do_details_all;
extern bool do_samples;
extern uint sample_rate;
extern bool do_details_statsd;
extern bool do_details_redis;

extern int  __dns_telemetry_load_anchor_map(const char* zones_fname, const char* details_fname);

extern void __dns_telemetry_fire_counts(double ts);
extern void __dns_telemetry_fire_totals(double ts);
extern void __dns_telemetry_fire_anyrd(double ts);
extern void __dns_telemetry_fire_clients(double ts);
extern void __dns_telemetry_fire_zones(double ts);
extern void __dns_telemetry_fire_owners(double ts);
extern void __dns_telemetry_fire_qnames(double ts);
extern void __dns_telemetry_fire_details(double ts, bool terminating);
extern void __dns_telemetry_zone_info_list();
extern void __dns_telemetry_set_node_id(const char* id);

%%}

function dns_telemetry_zone_info_list%(%):any
%{
	__dns_telemetry_zone_info_list();
	return 0;
%}

function dns_telemetry_fire_counts%(ts:double%):any
%{
	if (do_counts) __dns_telemetry_fire_counts(ts);
	return 0;
%}

function dns_telemetry_fire_totals%(ts:double%):any
%{
	__dns_telemetry_fire_totals(ts);
	return 0;
%}

function dns_telemetry_fire_anyrd%(ts:double%):any
%{
	if (do_anyrd_stats) __dns_telemetry_fire_anyrd(ts);
	return 0;
%}

function dns_telemetry_fire_clients%(ts:double%):any
%{
	if (do_client_stats) __dns_telemetry_fire_clients(ts);
	return 0;
%}

function dns_telemetry_fire_zones%(ts:double%):any
%{
	if (do_zone_stats) __dns_telemetry_fire_zones(ts);
	return 0;
%}

function dns_telemetry_fire_owners%(ts:double%):any
%{
	if (do_zone_stats) __dns_telemetry_fire_owners(ts);
	return 0;
%}

function dns_telemetry_fire_qnames%(ts:double%):any
%{
	if (do_qname_stats) __dns_telemetry_fire_qnames(ts);
	return 0;
%}

function dns_telemetry_fire_details%(ts:double, terminating:bool%):any
%{
	if (do_details) __dns_telemetry_fire_details(ts, terminating);
	return 0;
%}

function dns_telemetry_get_do_counts%(%): bool
%{
	return new Val(do_counts, TYPE_BOOL);
%}

function dns_telemetry_get_do_totals%(%): bool
%{
	return new Val(do_totals, TYPE_BOOL);
%}

function dns_telemetry_get_do_details%(%): bool
%{
	return new Val(do_details, TYPE_BOOL);
%}

function dns_telemetry_get_do_anyrd%(%): bool
%{
	return new Val(do_anyrd_stats, TYPE_BOOL);
%}

function dns_telemetry_get_do_clients%(%): bool
%{
	return new Val(do_client_stats, TYPE_BOOL);
%}

function dns_telemetry_get_do_zones%(%): bool
%{
	return new Val(do_zone_stats, TYPE_BOOL);
%}

function dns_telemetry_get_do_qnames%(%): bool
%{
	return new Val(do_qname_stats, TYPE_BOOL);
%}

function dns_telemetry_set_do_counts%(enable:bool%): any
%{
	do_counts = enable;
	return 0;
%}

function dns_telemetry_get_sample_rate%(%): count
%{
	return new Val(sample_rate, TYPE_COUNT);
%}

function dns_telemetry_set_sample_rate%(rate:count%): count
%{
	int old_rate = sample_rate;
	sample_rate = rate;
	return new Val(old_rate, TYPE_COUNT);
%}

# Sure, a little ugly. But it accomplishes what I need. 
# See analyzers/protocols/dns_telemetry/DNS.cc for what this is about.
function dns_telemetry_set_do_details%(enable:bool%): any
%{
	do_details = enable;
	if (do_details && !dns_telemetry_detail_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_detail_info event handler defined.\n");
	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_details_statsd%(enable:bool%): any
%{
	do_details_statsd = enable;
	return 0;
%}

function dns_telemetry_set_do_details_redis%(enable:bool%): any
%{
	do_details_redis = enable;
	return 0;
%}

function dns_telemetry_set_do_totals%(enable:bool%): any
%{
	do_totals = enable;
	if (!dns_telemetry_totals) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_totals event handler defined.\n");
//	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_zones%(enable:bool%): any
%{
	do_zone_stats = enable;
	if (!dns_telemetry_zone_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_zone_info event handler defined.\n");
//	   exit(1);
	}
	return 0;
%}

function dns_telemetry_load_anchor_map%(config_fname:string, details_fname:string%): any
%{
	const char* config = config_fname->CheckString();
	const char* details = details_fname->CheckString();
 	__dns_telemetry_load_anchor_map(config, details);
	return 0;
%}

function dns_telemetry_set_do_owners%(enable:bool%): any
%{
	do_owner_stats = enable;
	if (do_owner_stats && !dns_telemetry_owner_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_owner_info event handler defined.\n");
	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_qnames%(enable:bool%): any
%{
	do_qname_stats = enable;
	if (do_qname_stats && !dns_telemetry_qname_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_qname_info event handler defined.\n");
	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_anyrd%(enable:bool%): any
%{
	do_anyrd_stats = enable;
	if (do_anyrd_stats && !dns_telemetry_anyrd_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_anyrd_info event handler defined.\n");
	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_clients%(enable:bool%): any
%{
	do_client_stats = enable;
	if (do_client_stats && !dns_telemetry_client_info) {
	   fprintf(stderr, "FATAL ERROR: No dns_telemetry_client_info event handler defined.\n");
	   exit(1);
	}
	return 0;
%}

function dns_telemetry_set_do_log_all%(enable:bool%): any
%{
	do_details_all = enable;
	return 0;
%}

function dns_telemetry_get_do_log_all%(enable:bool%): any
%{
	return new Val(do_details_all, TYPE_BOOL);
%}

function dns_telemetry_set_node_id%(node_id:string%): any
%{
	const char* id = node_id->CheckString();
	__dns_telemetry_set_node_id(id);
	return 0;
%}

